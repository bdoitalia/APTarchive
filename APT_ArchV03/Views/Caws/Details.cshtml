@model APT_ArchV03.Models.Caw
@using APT_ArchV03.Models
@Styles.Render("~/Content/jQuery-File-Upload")
@Styles.Render("~/Content/caw")
@Styles.Render("~/Content/FileUploadPauseResumeCss")

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    @Scripts.Render("~/bundles/cawscripts")
    @Scripts.Render("~/bundles/combobox")
    @Styles.Render("~/Content/caw")
}

@{
    ViewBag.Title = Model.caw_name.ToString() + " Details";
    Layout = "~/Views/Shared/_Layout.cshtml";

}

<h2 class="max-lentght-200">@Model.caw_name@*.Replace(Model.caw_name, Model.caw_name.Substring(0,5) + "...")*@</h2>

<div id="detail-page">
    <h4 style="display: inline-flex;">Details</h4>
    <span id="statusflag" style="display: inline-flex;" class="pull-right stage @(Model.caw_status == 1 ? "stage1" : (Model.caw_status == 2 ? "stage2" : "stage3") )" data-toggle="tooltip" title="@(Model.caw_status == 1 ? "Opened" : (Model.caw_status == 2 ? "Reporting" : (Model.caw_status == 3 ? "Archived" : (Model.caw_status == 4 ? "Delayed" : "Unknown" ) )) )"></span>
    <hr />
    <div id="accordion">
        <h4>Opening information</h4>
        <div>
            <ul class="list-group borderless">
                <dl class="dl-horizontal">
                    <li class="list-group-item">
                    <dt>
                        @Html.DisplayNameFor(model => model.caw_name)
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.caw_name)
                    </dd>
                    </li>
                    <li class="list-group-item">
                    <dt>
                        @Html.DisplayNameFor(model => model.caw_client)
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.caw_client)
                    </dd>
                    </li>
                    <li class="list-group-item">

                    <dt>
                        @Html.DisplayNameFor(model => model.CawJobs)

                    </dt>

                    @foreach (var item in Model.CawJobs)
                    {
                        <dd>@item.cawjob_jc - @item.cawjob_jn</dd>
                    }

                    </li>

                    <li class="list-group-item">
                    <dt>
                        @Html.DisplayNameFor(model => model.caw_partner)
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.caw_partner)
                    </dd>
                    </li>

                    <li class="list-group-item">
                    <dt>
                        @Html.DisplayNameFor(model => model.caw_manager)
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.caw_manager)
                    </dd>
                    </li>

                    <li class="list-group-item">
                    <dt>
                        @Html.DisplayNameFor(model => model.caw_office)
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.caw_office)
                    </dd>
                    </li>

                    <li class="list-group-item">
                    <dt>
                        @Html.DisplayNameFor(model => model.caw_stdate)
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.caw_stdate)
                    </dd>
                    </li>

                    <li class="list-group-item">
                    <dt>
                        @Html.DisplayNameFor(model => model.caw_notes)
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.caw_notes)
                    </dd>
                    </li>

                    @*
                        <dd>
                            @Html.DisplayFor(model => model.caw_usrcreator)
                            @Html.ListBox("LstCawJobs", ViewData["LstCawJobs"] as SelectListItem[], htmlAttributes: new { @class = "form-control" })
                            @Html.ListBox("LstCawJobs1", ViewData["LstCawJobs1"] as SelectListItem[], htmlAttributes: new { @class = "form-control" })
                        </dd>*@

                </dl>
            </ul>
        </div>
        <h4>Reporting information</h4>
        <div>
            <ul class="list-group borderless">
                <dl class="dl-horizontal">

                    <li class="list-group-item">
                    <dt style="@(Model.caw_status ==1 ? "padding-top: 6px;" : "" )">
                        @Html.DisplayNameFor(model => model.caw_reldate)
                    </dt>
                    <dd>
                        @if (Model.caw_status == 1)
                        {
                            @Html.EditorFor(model => model.caw_reldate, new { htmlAttributes = new { @class = "form-control", required = "required", title = "Report date is required" } })
                            @Html.ValidationMessageFor(model => model.caw_reldate, "", new { @class = "text-danger" })
                        }
                        else
                        {
                            @Html.DisplayFor(model => model.caw_reldate);
                        }

                    </dd>

                    </li>
                </dl>
            </ul>
            <button id="btnToPhase2" class="btn btn-default pull-right" @(Model.caw_status == 1 ? "" : "disabled")>Submit</button>

        </div>
        <h4>Closing information</h4>
        <div>
            @if (Model.caw_status == 2)
            {
                @*<script>
                        var $form = null;
                        $(function () {

                            $form = $('#fileupload').fileupload({
                                dataType: 'json',
                                maxChunkSize: 10000000
                            });

                        });
                        $('#fileupload').addClass('fileupload-processing');
                    </script>*@

                <ul class="list-group borderless">
                    <dl class="dl-horizontal">

                        <li class="list-group-item">
                        <dt>
                            @Html.DisplayNameFor(model => model.caw_dldate)
                        </dt>
                        <dd>
                            @Html.DisplayFor(model => model.caw_dldate)
                        </dd>
                        </li>

                        <li class="list-group-item">
                            <dt style="padding-top: 6px;">
                                @Html.DisplayNameFor(model => model.caw_archdate)
                            </dt>
                            <dd>
                                @Html.EditorFor(model => model.caw_archdate, new { htmlAttributes = new { @class = "form-control", required = "required", title = "Archiving date is required" } })
                                @Html.ValidationMessageFor(model => model.caw_archdate, "", new { @class = "text-danger" })
                            </dd>
                        </li>
                        <li class="list-group-item">
                            <dt>
                                @Html.DisplayNameFor(model => model.caw_archplan)
                            </dt>
                            <dd>
                                @Html.RadioButtonFor(model => model.caw_archplan, "Digital", htmlAttributes: new { @class = "radio-inline", @checked = true, id = "pdigital", style = "margin-top: 0;" }) Digital
                                @Html.RadioButtonFor(model => model.caw_archplan, "Physical", htmlAttributes: new { @class = "radio-inline", id = "pphysical" }) Physical
                                @Html.ValidationMessageFor(model => model.caw_archplan, "", new { @class = "text-danger" })
                            </dd>
                        </li>
                    </dl>
                </ul>
                <hr />


                @Html.Partial("_FilesPauseResume")
                @*@Html.Partial("_Files")*@
                <button id="btnArchive" class="btn btn-default pull-right" disabled>Archive</button>
                @Scripts.Render("~/bundles/FileUploadPauseResumeJs")

                <script>

                    /* global $, window */

                    $(function () {
                        'use strict';

                        var msg_resume = ' bytes already uploaded. To resume upload click start';
                        var msg_override = 'File already uploaded. Overwrite anyway?';
                        var msg_leave = 'You are currently uploading files. If you leave this page, your upload may not complete successfully.';

                        var web_app = '/';                                                   // Name of a web application (usually in full IIS mode). Can be found in Properties/Web/Server/Project-Url. Example: http://localhost/Demo (Name of web application is "Demo")


                        var url = web_app + 'Backload/FileHandler?objectContext=@(Model.caw_partner_code.ToUpper())&id=@(Model.caw_id)&uploadContext=@(Model.caw_type.Replace(" ", "-"))';


                        // Initialize the jQuery File Upload widget:
                        $('#fileupload').fileupload({
                            url: url,
                            maxChunkSize: 5000000,                                           // Size of file chunks (data packets): 5MB. Note: In a real world scenario this depends on target infrastructure or use cases.
                            acceptFileTypes: /(jpg)|(jpeg)|(gsa)|(mp4)|(png)|(gif)|(pdf)$/i,             // Allowed file types

                            // the add function is called immediately after a file was added to the client UI list, but not uploaded so far.
                            add: function (e, data) {
                                var that = this;

                                // "getFileInfo" requests meta data for the file just added to the client UI list from the server.
                                //   execute: getFileInfo({filename}) (get file or chunk meta data);
                                //   ts: time-stamp (prevents caching)
                                $.getJSON(url, { execute: "getFileInfo(" + data.files[0].name + ")", ts: e.timeStamp },
                                    // Server response
                                    function (result) {
                                        var uuid = data.files[0].size.toString(16);                                             // Create new UUID based on the file size or any other value like user id, etc

                                        if (result.files.length > 0) {                                                          // If result.files.length is 0 no previous partial uploads
                                            for (var i = 0; i < result.files.length; i++) {                                     // Iterate over the list of partial uploads for this file name, usually only one exist
                                                var file = result.files[i];
                                                if ((file.extra.chunkInfo != null) && (file.extra.chunkInfo.uuid == uuid)) {    // if chunkinfo is not null and has the same UUID we can resume the upload
                                                    data.uploadedBytes = file.extra.chunkInfo.uploadedSize;                     // Set number of bytes already uploaded
                                                    alert(file.extra.chunkInfo.uploadedSize + msg_resume);
                                                } else if (data.files[0].size == file.size) {                                   // if true, file already uploaded
                                                    if (!confirm(msg_override)) {
                                                        return;                                                                 // Do not add file to list, because file is already fully uploaded
                                                    }
                                                }
                                            }
                                        }

                                        data.formData = { 'uuid': uuid };                                                       // When uploading the file, the UUID prevents the file to be overwritten by a file with different size
                                        $.blueimp.fileupload.prototype.options.add.call(that, e, data);                         // Add file with the UUID as form parameter to client UI list
                                    })
                            },
                            send: function (e, data) {
                                uploadingFiles += 1;
                            },
                            always: function (e, data) {
                                uploadingFiles -= 1;
                            }
                        })


                        // Warn user if file is currently uploaded.
                        var uploadingFiles = 0;
                        $(window).bind('beforeunload', function () {
                            if (uploadingFiles > 0) {
                                return msg_leave;
                            }
                        });

                        // Warn after upload.
                        var uploadingFiles = 0;
                        $(window).bind('fileuploaddone', function () {
                            //console.log('File Completed');
                            $('#btnArchive').removeAttr('disabled');
                        });


                        // Optional: Load existing files:
                        $('#fileupload').addClass('fileupload-processing');
                        $.ajax({
                            // Uncomment the following to send cross-domain cookies:
                            // xhrFields: {withCredentials: true},
                            url: url,
                            dataType: 'json',
                            context: $('#fileupload')[0]
                        }).always(function () {
                            $(this).removeClass('fileupload-processing');
                        }).done(function (result) {
                            $(this).fileupload('option', 'done')
                                .call(this, $.Event('done'), { result: result });
                        });
                    });

                    $('input[name=caw_archplan]').on('change', function () {
                        if ($('#caw_archdate').val() != "" ) {
                            $('#btnArchive').removeAttr('disabled');
                        }                        
                    })

                </script>
            }
            @if (Model.caw_status == 1)
            {
                <p class="text-danger">Current APT stage prevents to show any value on this section.</p>
            }
            @if (Model.caw_status == 3)
            {
                @*@Html.Partial("_Show")*@
                <h3>Uploaded Files: @Model.CawFiles.Count</h3>



                <div class="container">
                    <ul class="list-group borderless">
                        <dl class="dl-horizontal">

                            <li class="list-group-item">
                            <dt>
                                @Html.DisplayNameFor(model => model.caw_archdate)
                            </dt>
                            <dd>
                                @Html.DisplayFor(model => model.caw_archdate)
                            </dd>
                            </li>

                            <li class="list-group-item">
                                <dt>
                                    @Html.DisplayNameFor(model => model.caw_archplan)
                                </dt>
                                <dd>
                                    @Html.DisplayFor(model => model.caw_archplan)
                                </dd>
                            </li>

                            @foreach (var file in Model.CawFiles)
    {
                        <li class="list-group-item">
                        <dt>
                            @*<span class="icon-groove"></span>*@
                        </dt>
                        <dd>
                            <span class="icon-groove"></span> @Html.DisplayFor(modelitem => file.cawfiles_fn)
                        </dd>
                        </li>

}
                        </dl>
                    </ul>
                </div>
            }
        </div>
    </div>
</div>
<p>
    @*@Html.ActionLink("Edit", "Edit", new { id = Model.caw_id }) |
        @Html.ActionLink("Back to List", "Index")*@

    <div class="col-md-12 actionbtn" style="padding-bottom: 31px;">
        <input type="submit" value="Modify" class="btn btn-default pull-right" onclick="location.href='@Url.Action("Edit","Caws", new { id = Model.caw_id })'" />
        <input type="button" value="Back" class="btn btn-default pull-right" onclick="location.href='@Url.Action("List","Caws")'" />
    </div>
</p>

<script>



    $(document).ready(function () {


        $('#accordion').accordion({
            header: "h4",
            icons: { "header": "ui-icon-caret-1-s", "activeHeader": "ui-icon-caret-1-n" },
            heightStyle: "content",
            collapsible: true,
            active: @Model.caw_status >= 3 ? 2 : @Model.caw_status
        });

        $(document).on('click', '#btnToPhase2', function () {

            $.ajax({
                type: 'POST',
                //contentType: "application/json",
                //processData: false,
                url: '/Caws/PostReportDate',

                dataType: 'json',

                data: {
                    id: @Model.caw_id,
                    reldate: $('#caw_reldate').val()
                },


                success: function (response) {

                    //$('#btnToPhase2').addClass("disabled");
                    //$('#caw_reldate').attr("disabled", "disabled")
                    //$('#statusflag').removeClass('stage1').addClass('stage2');
                    //$('#accordion').accordion({ active: 3 });
                    alert(response.responseText);
                    location.reload();

                },
                error: function (response) {
                    alert('There was a problem when trying to submit the report date. ' + response.responseText);
                }
            });

        });

        $(document).on('click', '#btnArchive', function () {

            $.ajax({
                type: 'POST',
                //contentType: "application/json",
                //processData: false,
                url: '/Caws/ArchiveAPT',

                dataType: 'json',

                data: {
                    id: @Model.caw_id,
                    formdata: $('input[name=caw_archplan]:checked').val()
                },


                success: function (response) {

                    //$('#btnToPhase2').addClass("disabled");
                    //$('#caw_reldate').attr("disabled", "disabled")
                    //$('#statusflag').removeClass('stage1').addClass('stage2');
                    //$('#accordion').accordion({ active: 3 });
                    alert(response.responseText);
                    location.reload();

                },
                error: function (response) {
                    alert('There was a problem when trying to submit the report date. ' + response.responseText);
                }
            });

        });

        $(document).on('click', 'button.btn.delete', function () {
            setTimeout(function () {
                if ($('#fileupload table tbody tr').length >= 1) {
                    $('#btnArchive').removeAttr('disabled');
                    //console.log('Enabled');
                } else {
                    $('#btnArchive').attr('disabled', 'disabled');
                    //console.log('Disabled');
                }
            }, 300);
        });



    });
    //$(document).on('click', 'button.btn.start', function () {
     //   console.log("File uploaded no bind");
        //$('#btnArchive').removeAttr("disabled");

    //});
</script>


@*@Scripts.Render("~/bundles/jQuery-File-Upload")*@