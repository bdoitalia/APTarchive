@model APT_ArchV03.Models.Caw
@using JQueryUIHelpers
@Styles.Render("~/Content/jQuery-File-Upload")
@Styles.Render("~/Content/caw")
@Styles.Render("~/Content/FileUploadPauseResumeCss")
@Scripts.Render("~/bundles/FileUploadPauseResumeJs")
@Scripts.Render("~/bundles/jqueryval")
@*@Scripts.Render("~/Scripts/globalize.js")*@

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
    int clearflag = Convert.ToInt32(ViewData["FlagNavJobs"]);




}


@*<script>
    $(document).ready(function () {
        Globalize.load;
    })
</script>*@

@if (clearflag == 1)
{
    <script>
        setTimeout(function () { $('#LstNavJobs').empty(); }, 500);

    </script>
}

@*<h2>Edit</h2>*@


@using (Html.BeginForm("Edit", "Caws", FormMethod.Post, new { id = "CAWEdit" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Modify CAW data<span style="position:absolute; right: 5%" class="stage @(Model.caw_status == 1 ? "stage1" : (Model.caw_status == 2 ? "stage2" : (Model.caw_status == 3 ? "stage3" : (Model.caw_status == 4 ? "stage4" : "stage0" ) )) )" data-toggle="tooltip" title="@(Model.caw_status == 1 ? "Opened" : (Model.caw_status == 2 ? "Reporting" : (Model.caw_status == 3 ? "Archived" : (Model.caw_status == 4 ? "Delayed" : "Unknown" ) )) )"></span></h4>

        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.caw_id)

        <div class="form-group">
            @Html.LabelFor(model => model.caw_client, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@Html.EditorFor(model => model.caw_client, new { htmlAttributes = new { @class = "form-control", placeholder = "Type client ID or name", required = "required", title = "Client name is required" } })*@
                @Html.EditorFor(model => model.caw_client, new { htmlAttributes = new { @class = "form-control", placeholder = "Type client ID or name", required = "required", title = "Client name is required", @Value = ViewData["Client"] } })
                @*@Html.Editor("Client", new { htmlAttributes = new { @class = "form-control", placeholder = "Type client ID or name", required = "required", title = "Client name is required", @Value = ViewData["Client"] } })*@
                @Html.ValidationMessageFor(model => model.caw_client, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.caw_status, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">

                @Html.DropDownList("Status", ViewData["Status"] as SelectListItem[], htmlAttributes: new { @class = "form-control" })

            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CawJobs, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.ListBox("LstNavJobs", ViewData["LstNavJobs"] as SelectListItem[], htmlAttributes: new { @class = "form-control" })
                @*@Html.ListBox("LstNavJobs", ViewBag.LstNavJobs as SelectListItem[], htmlAttributes: new { @class = "form-control" })*@

                <input id="BtnAddJob" type="button" value="Add" class="btn vertical" />
                <input id="BtnRemoveJob" type="button" value="Remove" class="btn vertical" />

                @Html.ListBox("LstCawJobs", ViewData["LstCawJobs"] as SelectListItem[], htmlAttributes: new { @class = "form-control", required = "required", title = "Please, add some jobs to this caw" })
                @Html.ValidationMessage("LstCawJobs", "", new { @class = "text-danger" })


            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.caw_partner, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("Partner", ViewData["Partner"] as SelectListItem[], htmlAttributes: new { @class = "form-control", required = "required", title = "Partner name is required" })
                @Html.ValidationMessage("Partner", "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.caw_manager, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10" data-text="Manager">
                @*@Html.DropDownList("Manager", new SelectList(string.Empty, "Value", "Text"), "--Select Manager--", htmlAttributes: new { @class = "form-control" })*@
                @Html.DropDownList("Manager", ViewBag.manager as SelectListItem[], htmlAttributes: new { @class = "form-control" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.caw_office, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@Html.DropDownList("Office", new SelectList(string.Empty, "Value", "Text"), "--Select Office--", htmlAttributes: new { @class = "form-control" })*@
                @Html.DropDownList("Office", ViewBag.office as SelectListItem[], htmlAttributes: new { @class = "form-control" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.caw_stdate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.caw_stdate, new { htmlAttributes = new { @class = "form-control" } })
                @*@Html.TextBoxFor(model => model.caw_stdate, "{0:MM/dd/yyyy}", new { @class = "form-control default-date-picker" })*@
                @*<script>console.log('@Model.caw_stdate.Value.ToShortDateString()'); alert('Ciao');</script>*@
                @Html.ValidationMessageFor(model => model.caw_stdate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.caw_delplan, htmlAttributes: new { @class = "control-label col-md-2" })

            <div class="col-md-10">
                @Html.RadioButtonFor(model => model.caw_delplan, "60", htmlAttributes: new { @class = "radio-inline", @checked = true }) 60
                @Html.RadioButtonFor(model => model.caw_delplan, "45", htmlAttributes: new { @class = "radio-inline" }) 45
                @Html.ValidationMessageFor(model => model.caw_delplan, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.caw_type, htmlAttributes: new { @class = "control-label col-md-2" })

            <div class="col-md-10">
                @Html.RadioButtonFor(model => model.caw_type, "Financial", htmlAttributes: new { @class = "radio-inline", @checked = true }) Financial
                @Html.RadioButtonFor(model => model.caw_type, "Non financial", htmlAttributes: new { @class = "radio-inline" }) Non financial
                @Html.ValidationMessageFor(model => model.caw_type, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.caw_name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.caw_name, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter caw name here" } })
                @Html.ValidationMessageFor(model => model.caw_name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.caw_notes, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.caw_notes, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.caw_notes, "", new { @class = "text-danger" })
            </div>
        </div>

        @* ---------------- Start Phase 2 ----------------------------------------------- *@

        @if (Model.caw_status >= 2)
        {
            <div class="form-group">
                @Html.LabelFor(model => model.caw_reldate, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.caw_reldate, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.caw_reldate, "", new { @class = "text-danger" })
                </div>
            </div>

        }


        @* ---------------- Start Phase 3 ----------------------------------------------- *@

        @if (Model.caw_status == 3)
        {
            <div class="form-group">
                @Html.LabelFor(model => model.caw_dldate, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">

                    @Html.EditorFor(model => model.caw_dldate, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.caw_dldate, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.caw_archdate, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.caw_archdate, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.caw_archdate, "", new { @class = "text-danger" })
                </div>
            </div>



        }



        @*<div class="form-group">
                <div class="col-md-12 actionbtn">
                    <input type="submit" value="Edit" class="btn btn-default pull-right" />
                    <input type="button" value="Back" class="btn btn-default pull-right" onclick="location.href='@Url.Action("List","Caws")'" />
                </div>
            </div>*@
    </div>

}

@* ------------------- Upload plugin here ------------------- *@

@if (Model.caw_status >= 2)
{

    @Html.Partial("_FilesPauseResume")

    <script>

                /* global $, window */

                $(function () {
                    'use strict';

                    var msg_resume = ' bytes already uploaded. To resume upload click start';
                    var msg_override = 'File already uploaded. Overwrite anyway?';
                    var msg_leave = 'You are currently uploading files. If you leave this page, your upload may not complete successfully.';

                    var web_app = '/';                                                   // Name of a web application (usually in full IIS mode). Can be found in Properties/Web/Server/Project-Url. Example: http://localhost/Demo (Name of web application is "Demo")


                    var url = web_app + 'Backload/FileHandler?objectContext=@(Model.caw_partner_code.ToUpper())&id=@(Model.caw_id)&uploadContext=@(Model.caw_type.Replace(" ", "-"))';


                    // Initialize the jQuery File Upload widget:
                    $('#fileupload').fileupload({
                        url: url,
                        maxChunkSize: 5000000,                                           // Size of file chunks (data packets): 5MB. Note: In a real world scenario this depends on target infrastructure or use cases.
                        acceptFileTypes: /(jpg)|(jpeg)|(gsa)|(mp4)|(png)|(gif)|(pdf)$/i,             // Allowed file types

                        // the add function is called immediately after a file was added to the client UI list, but not uploaded so far.
                        add: function (e, data) {
                            var that = this;

                            // "getFileInfo" requests meta data for the file just added to the client UI list from the server.
                            //   execute: getFileInfo({filename}) (get file or chunk meta data);
                            //   ts: time-stamp (prevents caching)
                            $.getJSON(url, { execute: "getFileInfo(" + data.files[0].name + ")", ts: e.timeStamp },
                                // Server response
                                function (result) {
                                    var uuid = data.files[0].size.toString(16);                                             // Create new UUID based on the file size or any other value like user id, etc

                                    if (result.files.length > 0) {                                                          // If result.files.length is 0 no previous partial uploads
                                        for (var i = 0; i < result.files.length; i++) {                                     // Iterate over the list of partial uploads for this file name, usually only one exist
                                            var file = result.files[i];
                                            if ((file.extra.chunkInfo != null) && (file.extra.chunkInfo.uuid == uuid)) {    // if chunkinfo is not null and has the same UUID we can resume the upload
                                                data.uploadedBytes = file.extra.chunkInfo.uploadedSize;                     // Set number of bytes already uploaded
                                                alert(file.extra.chunkInfo.uploadedSize + msg_resume);
                                            } else if (data.files[0].size == file.size) {                                   // if true, file already uploaded
                                                if (!confirm(msg_override)) {
                                                    return;                                                                 // Do not add file to list, because file is already fully uploaded
                                                }
                                            }
                                        }
                                    }

                                    data.formData = { 'uuid': uuid };                                                       // When uploading the file, the UUID prevents the file to be overwritten by a file with different size
                                    $.blueimp.fileupload.prototype.options.add.call(that, e, data);                         // Add file with the UUID as form parameter to client UI list
                                })
                        },
                        send: function (e, data) {
                            uploadingFiles += 1;
                        },
                        always: function (e, data) {
                            uploadingFiles -= 1;
                        }
                    })


                    // Warn user if file is currently uploaded.
                    var uploadingFiles = 0;
                    $(window).bind('beforeunload', function () {
                        if (uploadingFiles > 0) {
                            return msg_leave;
                        }
                    });

                    // Warn after upload.
                    var uploadingFiles = 0;
                    $(window).bind('fileuploaddone', function () {
                        //console.log('File Completed');
                        $('#btnArchive').removeAttr('disabled');
                    });


                    // Optional: Load existing files:
                    $('#fileupload').addClass('fileupload-processing');
                    $.ajax({
                        // Uncomment the following to send cross-domain cookies:
                        // xhrFields: {withCredentials: true},
                        url: url,
                        dataType: 'json',
                        context: $('#fileupload')[0]
                    }).always(function () {
                        $(this).removeClass('fileupload-processing');
                    }).done(function (result) {
                        $(this).fileupload('option', 'done')
                            .call(this, $.Event('done'), { result: result });
                    });
                });

    </script>


}

@*<div class="form-group">*@
<div class="col-md-12 actionbtn" style="padding-bottom: 31px;">
    <input type="submit" value="Save" class="btn btn-default pull-right" form="CAWEdit" onclick="selectDeselect('LstCawJobs', true)" />
    <input type="button" value="Back" class="btn btn-default pull-right" onclick="location.href='@Url.Action("Details","Caws", new { id = Model.caw_id })'" />
</div>
@*</div>*@


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    @Scripts.Render("~/bundles/cawscripts")
    @Scripts.Render("~/bundles/combobox")
    @Styles.Render("~/Content/caw")
}




<script>

    //funzione per convertire data
    function formatDate(date) {

        var datearray = date.split('/');

        var d = new Date(datearray[2], datearray[1] - 1, datearray[0]),
            month = '' + (d.getMonth() + 1),
            day = '' + d.getDate(),
            year = d.getFullYear();

        if (month.length < 2) month = '0' + month;
        if (day.length < 2) day = '0' + day;

        return [year, month, day].join('-');
    }


    $(document).ready(function () {

        //$("Client").on("change", function () { console.log("Changed Client"); })

        $('#caw_client').on("change", function () {
            //var currentval = $('#caw_client').val().split(" - ").shift();
            //console.log("caw_client val = " + currentval);
            //console.log("caw_client = " + $('#caw_client'));
                $("#LstNavJobs, #LstCawJobs").empty();
                //console.log("Sono lo script");
            //$("#LstNavJobs, #LstCawJobs").removeAttr("disabled");

            var datasource = $("#caw_client").val().split(" - ").shift();
            var iddatatarget = $("#LstNavJobs");
            var urltarget = '@Url.Action("GetJobs")';

            var result = PostAjax(datasource, iddatatarget, urltarget);
            //console.log(result);
            if (result == 1) {

            }
            $(document).ajaxSuccess(function (event, xhr, settings) {
                //debugger;
                //console.log($('#LstNavJobs').val());
                //console.log(event);
                //console.log(xhr);
                //console.log(settings.url);
                //activetarget = $(event.currentTarget.activeElement).attr('id');
                //activetarget = $(event.currentTarget.activeElement).attr('id');
                ///Caws/GetJobs
                //console.log(activetarget);

                if (settings.url == "/Caws/GetJobs") {

                    $('input[data-title="drpinput"], a[data-title="drpbutton"]').removeAttr("disabled");
                    ////
                    $("#Partner").empty();
                    $("#Partner").removeAttr("disabled");
                    selectDeselect('LstNavJobs', true)
                    //Getting Jobcode by from LstNavJobs' first element Value after splitting (before " - ")
                    var datasource = $("#LstNavJobs").val().shift().split(" - ").shift();
                    var iddatatarget = $("#Partner");
                    var urltarget = '@Url.Action("GetPartner")';

                    PostAjax(datasource, iddatatarget, urltarget);

                    $("#Manager").empty();

                    //var datasource = $("#Jobs").val();
                    var iddatatarget = $("#Manager");
                    var urltarget = '@Url.Action("GetManager")';

                    PostAjax(datasource, iddatatarget, urltarget);

                     $("#Office").empty();

                    //var datasource = $("#Jobs").val();
                     var iddatatarget = $("#Office");
                    var urltarget = '@Url.Action("GetOffice")';

                    PostAjax(datasource, iddatatarget, urltarget);

                    @*var datasource = $("#Clients").val();
                    var iddatatarget = $("#LstCawJobs");
                    var urltarget = '@Url.Action("GetJobs")';
                    PostAjax(datasource, iddatatarget, urltarget);*@

                    $(event.currentTarget).unbind('ajaxSuccess')
                    return false;
                    /////

                }
            })
            return false;


        });

        

        });



    $("#caw_client").autocomplete({

            source: function (request, response) {
                $.ajax({
                    url: '@Url.Action("RetrieveClients")',
                    datatype: "json",
                    type: "POST",
                    data: {
                        Prefix: request.term
                    },
                    success: function (data) {
                        response($.map(data, function (val, item) {
                            //console.log("Data : " + data);
                            //console.log("item : " + item);
                            //console.log("Value : " + val.Client_Name);
                            //console.log("Value : " + val.Client_ID);
                            return {
                                label: (val.Client_ID + " - " + val.Client_Name),
                                value: (val.Client_ID + " - " + val.Client_Name)
                            }
                        }))
                    }
                })
            },
            delay: 300,
            minLength: 2,
            select: function (event, ui) {
                $("#caw_client").val(ui.item.Client_Name);
            }
        });



</script>
<style>
    .1custom-combobox {
        position: relative;
        display: inline-block;
    }

    .custom-combobox-toggle {
        position: absolute;
        top: 0;
        bottom: 0;
        margin-left: -1px;
        padding: 0;
    }

    .custom-combobox-input {
        margin: 0;
        padding: 5px 10px;
        background: none !important;
    }

    .ui-state-active .ui-icon, .ui-button:active .ui-icon {
        background: none !important;
    }

    .ui-icon {
        width: 2px;
        height: 2px;
        background: none !important;
    }

    a.btncombo, a.btncombo:hover, span a.btncombo:active, a.btncombo:focus {
        border: none;
        background: none;
        position: absolute;
        border-radius: 4px;
        padding: 0;
    }

        a.btncombo:focus {
            outline: none !important;
        }

        a.btncombo span {
            display: inline-block;
            width: 0;
            height: 0;
            margin-left: 2px;
            vertical-align: middle;
            border-top: 4px dashed;
            border-top: 4px solid\9;
            border-right: 4px solid transparent;
            border-left: 4px solid transparent;
        }

    .custom-combobox a.btncombo span {
        margin-left: 0;
        margin-top: 0;
    }
</style>
